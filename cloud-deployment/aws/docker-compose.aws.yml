# AWS ECS/Fargate Docker Compose Configuration
# For Advanced Botnet Research Framework

version: '3.8'

x-aws-vpc: "vpc-12345678"
x-aws-cluster: "botnet-research-cluster"
x-aws-loadbalancer: "botnet-research-alb"

services:
  # C2 Server - Main Application
  c2-server:
    build:
      context: ../..
      dockerfile: c2-server/docker/Dockerfile
      target: production
    image: botnet-c2:latest
    ports:
      - "80:8080"
      - "443:8443"
      - "8081:8081"
    environment:
      - RESEARCH_MODE=true
      - C2_MODE=RESEARCH
      - ETHICAL_CONTROLS=strict
      - COMPLIANCE_LOGGING=enabled
      - C2_DATABASE_URL=${DATABASE_URL}
      - C2_REDIS_URL=${REDIS_URL}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: awslogs
      options:
        awslogs-group: /aws/ecs/botnet-research
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: c2-server
    x-aws-role: arn:aws:iam::123456789012:role/ecsTaskExecutionRole

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=botnet_research
      - POSTGRES_USER=botnet
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: awslogs
      options:
        awslogs-group: /aws/ecs/botnet-research
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: postgres
    x-aws-policies:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    logging:
      driver: awslogs
      options:
        awslogs-group: /aws/ecs/botnet-research
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: redis

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./cloud-deployment/aws/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: awslogs
      options:
        awslogs-group: /aws/ecs/botnet-research
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: prometheus

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:9.3.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: awslogs
      options:
        awslogs-group: /aws/ecs/botnet-research
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: grafana

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

x-aws-logs_retention: 30
