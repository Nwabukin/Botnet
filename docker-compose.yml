version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: botnet-postgres
    environment:
      POSTGRES_DB: botnet_research
      POSTGRES_USER: botnet_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-research_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./c2-server/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - botnet-network
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botnet_user -d botnet_research"]
      interval: 30s
      timeout: 10s
      retries: 3

  # C2 Server
  c2-server:
    build:
      context: .
      dockerfile: c2-server/docker/Dockerfile
    container_name: botnet-c2-server
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=botnet_research
      - DB_USER=botnet_user
      - DB_PASSWORD=${DB_PASSWORD:-research_password_change_me}
      - C2_PORT=${C2_PORT:-8443}
      - C2_SSL_CERT=/certs/server.crt
      - C2_SSL_KEY=/certs/server.key
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./configs/development:/configs:ro
      - ./certs:/certs:ro
      - c2_logs:/var/log/c2
    networks:
      - botnet-network
    ports:
      - "${C2_PORT:-8443}:8443"
      - "8080:8080"  # HTTP fallback
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard
  web-dashboard:
    build:
      context: ./c2-server/web-dashboard
      dockerfile: Dockerfile
    container_name: botnet-dashboard
    environment:
      - REACT_APP_C2_API_URL=https://localhost:${C2_PORT:-8443}
      - REACT_APP_WS_URL=wss://localhost:${C2_PORT:-8443}/ws
    networks:
      - botnet-network
    ports:
      - "3000:3000"
    depends_on:
      - c2-server
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: botnet-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    networks:
      - botnet-network
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: botnet-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./tools/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - botnet-network
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: botnet-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_change_me}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./tools/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - botnet-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation with ELK stack (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: botnet-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - botnet-network
    ports:
      - "9200:9200"
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: botnet-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - botnet-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  botnet-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  c2_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Environment variables template
# Create a .env file with these variables:
# DB_PASSWORD=your_secure_database_password
# REDIS_PASSWORD=your_secure_redis_password
# GRAFANA_PASSWORD=your_secure_grafana_password
# C2_PORT=8443
# LOG_LEVEL=INFO
